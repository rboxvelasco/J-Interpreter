# Generated from g.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,80,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,52,8,9,10,9,12,9,55,9,9,1,9,1,9,
        1,10,3,10,60,8,10,1,10,4,10,63,8,10,11,10,12,10,64,1,11,1,11,5,11,
        69,8,11,10,11,12,11,72,9,11,1,12,4,12,75,8,12,11,12,12,12,76,1,12,
        1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,1,0,5,2,0,10,10,13,13,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,84,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,30,1,0,0,0,5,32,1,0,0,0,7,34,
        1,0,0,0,9,36,1,0,0,0,11,38,1,0,0,0,13,40,1,0,0,0,15,42,1,0,0,0,17,
        44,1,0,0,0,19,46,1,0,0,0,21,59,1,0,0,0,23,66,1,0,0,0,25,74,1,0,0,
        0,27,28,5,61,0,0,28,29,5,58,0,0,29,2,1,0,0,0,30,31,5,40,0,0,31,4,
        1,0,0,0,32,33,5,41,0,0,33,6,1,0,0,0,34,35,5,43,0,0,35,8,1,0,0,0,
        36,37,5,45,0,0,37,10,1,0,0,0,38,39,5,42,0,0,39,12,1,0,0,0,40,41,
        5,37,0,0,41,14,1,0,0,0,42,43,5,124,0,0,43,16,1,0,0,0,44,45,5,94,
        0,0,45,18,1,0,0,0,46,47,5,78,0,0,47,48,5,66,0,0,48,49,5,46,0,0,49,
        53,1,0,0,0,50,52,8,0,0,0,51,50,1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,
        0,53,54,1,0,0,0,54,56,1,0,0,0,55,53,1,0,0,0,56,57,6,9,0,0,57,20,
        1,0,0,0,58,60,5,95,0,0,59,58,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,
        61,63,7,1,0,0,62,61,1,0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,1,
        0,0,0,65,22,1,0,0,0,66,70,7,2,0,0,67,69,7,3,0,0,68,67,1,0,0,0,69,
        72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,24,1,0,0,0,72,70,1,0,0,
        0,73,75,7,4,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,
        1,0,0,0,77,78,1,0,0,0,78,79,6,12,0,0,79,26,1,0,0,0,6,0,53,59,64,
        70,76,1,6,0,0
    ]

class gLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    COMMENT = 10
    NUM = 11
    ID = 12
    WS = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'=:'", "'('", "')'", "'+'", "'-'", "'*'", "'%'", "'|'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "NUM", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "COMMENT", "NUM", "ID", "WS" ]

    grammarFileName = "g.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


